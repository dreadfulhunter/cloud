class Router {

    constructor(emitter) {
        this.emitter = emitter;
        this.route()
    }

    route() {
        this.emitter.on('newReq', (req, res) => {
            let url = req.url.split('?')[0]
            let method = req.method
                if (this.routes.hasOwnProperty(url) && this.routes[url].hasOwnProperty(method)) {
                    let middleware = this.routes[url][method].middleware;
                    let firstMiddleware = this.prepareMiddleWares(req, res, middleware);
                    firstMiddleware();
                } else {
                    res.statusCode = 400;
                    res.end('Wrong Route')
                }
            }
        );
    }


    setRoutes(routes) {
        this.routes = routes
    }


    prepareMiddleWares(req, res, middleWares) {
        let boundMiddleWares = [];
        boundMiddleWares[middleWares.length - 1] = middleWares[middleWares.length - 1].bind(null, req, res);
        for (let i = middleWares.length - 2; i >= 0; i--) {
            boundMiddleWares[i] = middleWares[i].bind(middleWares[middleWares.length - 1].this, req, res, boundMiddleWares[i + 1]);
        }
        return boundMiddleWares[0];
    }
}

module.exports = Router